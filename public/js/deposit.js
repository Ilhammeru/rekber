/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/deposit.js":
/*!*********************************!*\
  !*** ./resources/js/deposit.js ***!
  \*********************************/
/***/ (() => {

eval("var dt;\nvar init = function init() {\n  dt = $('#table-deposit').DataTable({\n    processing: true,\n    serverSide: true,\n    responsive: true,\n    scrollX: true,\n    ajax: {\n      url: app_url + '/deposit/ajax/' + status\n    },\n    columns: [{\n      data: 'id',\n      render: function render(data, type, row, meta) {\n        return meta.row + meta.settings._iDisplayStart + 1;\n      },\n      width: '5%',\n      className: 'text-center'\n    }, {\n      data: 'amount',\n      name: 'amount'\n    }, {\n      data: 'status',\n      name: 'status'\n    }, {\n      data: 'action',\n      name: 'action',\n      className: 'text-center',\n      orderable: false\n    }],\n    order: [[0, 'desc']]\n  });\n};\nvar updateDepositRule = function updateDepositRule(e) {\n  var id = e.value;\n  $.ajax({\n    type: 'GET',\n    url: app_url + '/deposit/update-deposit-rule/' + id,\n    success: function success(res) {\n      console.log('res', res);\n      $('.deposit-rule #minimum_value').val(res.data.detail.minimum_trx);\n      $('.deposit-rule #maximum_value').val(res.data.detail.maximum_trx);\n      $('.deposit-rule #target-minimum').html(numeral(parseFloat(res.data.detail.minimum_trx)).format('0,0'));\n      $('.deposit-rule #target-maximum').html(numeral(parseFloat(res.data.detail.maximum_trx)).format('0,0'));\n      $('.deposit-rule #target-fixed-charge-value').val(res.data.detail.fixed_charge);\n      $('.deposit-rule #target-percent-charge-value').val(res.data.detail.percent_charge);\n      if (res.data.need_to_rate) {\n        $('#target-conversion-rate #target-rate').html(res.data.detail.rate);\n        $('#target-conversion-rate #target-label-currency').html(i18n.global.in_current + ' ' + res.data.detail_currency);\n        $('#target-conversion-rate #target-rate-result').html(0);\n        $('#target-conversion-rate').removeClass('d-none');\n      } else {\n        $('#target-conversion-rate').addClass('d-none');\n      }\n      $('.deposit-rule').removeClass('d-none');\n      updatePayableAndCharge();\n    },\n    error: function error(err) {\n      handleError(err);\n    }\n  });\n};\nvar updatePayableAndCharge = function updatePayableAndCharge() {\n  var amount = $('#form-deposit #amount').val();\n  var payment = $('#form-deposit #payment').val();\n  var fixedCharge = parseFloat($('.deposit-rule #target-fixed-charge-value').val());\n  var percentCharge = parseFloat($('.deposit-rule #target-percent-charge-value').val());\n  if (payment && amount) {\n    amount = parseFloat(amount);\n    var charge = parseFloat(amount * percentCharge / 100) + fixedCharge;\n    var payable = amount + parseFloat(charge);\n    var currentRate = $('#target-conversion-rate #target-rate').html();\n    if (currentRate) {\n      var rateResult = parseFloat(currentRate) * parseFloat(payable);\n      $('#target-conversion-rate #target-rate-result').html(rateResult);\n    }\n    $('.deposit-rule #target-payable').html(numeral(payable).format('0,0'));\n    $('.deposit-rule #target-charge').html(numeral(charge).format('0,0'));\n    $('.deposit-rule #charge_total').val(charge);\n    $('#form-deposit #payable').val(payable);\n  }\n};\nvar submitDeposit = function submitDeposit() {\n  var form = $('#form-deposit').serializeArray();\n  $.ajax({\n    type: 'POST',\n    url: app_url + '/deposit',\n    data: form,\n    beforeSend: function beforeSend() {\n      toggleLoading(true, i18n.global.processing);\n      removeValidation('form-deposit');\n    },\n    success: function success(res) {\n      toggleLoading(false);\n      console.log('res', res);\n      handleSuccess(res.message);\n      responseUrl(res.data.url);\n    },\n    error: function error(err) {\n      toggleLoading(false);\n      handleError(err);\n    }\n  });\n};\nvar sendPaymentProof = function sendPaymentProof(trx) {\n  var formData = new FormData($(\"#form-confirm-payment\")[0]);\n  $.ajax({\n    type: 'POST',\n    url: app_url + '/deposit/confirm-payment/' + trx,\n    data: formData,\n    async: false,\n    cache: false,\n    contentType: false,\n    enctype: 'multipart/form-data',\n    processData: false,\n    beforeSend: function beforeSend() {\n      toggleLoading(true, i18n.global.processing);\n      removeValidation('form-confirm-payment');\n    },\n    success: function success(res) {\n      toggleLoading(false);\n      console.log('res', res);\n      handleSuccess(res.message);\n      responseUrl(res.data.url, 1200);\n    },\n    error: function error(err) {\n      toggleLoading(false);\n      handleError(err);\n    }\n  });\n};\nvar doConfirmDeposit = function doConfirmDeposit(trxId) {\n  $.ajax({\n    type: 'GET',\n    url: app_url + '/deposit/do-confirm/' + trxId,\n    beforeSend: function beforeSend() {\n      toggleLoading(true, i18n.global.processing);\n    },\n    success: function success(res) {\n      toggleLoading(false);\n      handleSuccess(res.message);\n      responseUrl(app_url + '/dashboard', 1200);\n    },\n    error: function error(err) {\n      toggleLoading(false);\n      handleError(err);\n    }\n  });\n};\nwindow.updateDepositRule = updateDepositRule;\nwindow.updatePayableAndCharge = updatePayableAndCharge;\nwindow.submitDeposit = submitDeposit;\nwindow.sendPaymentProof = sendPaymentProof;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/deposit.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/deposit.js"]();
/******/ 	
/******/ })()
;